name: build-iDaVIE-v-on-push
run-name: ${{ github.actor }} is building to test commit on ${{ github.ref_name }}
on:
  # Run the automated build whenever there is a push to main, or cilliers/autoBuild for testing
  push:
    branches: [main, cilliers/autoBuild]

  # Run the automated build whenever a pull request to main is opened
  pull_request:
    branches: [main]

  # Run the automated build when triggered manually from the website
  workflow_dispatch:

jobs:
  auto-build:
    runs-on: windows-2022
    steps:
      # Edit the vcpkg triplet files to only install release versions of packages
      # See https://github.com/Microsoft/vcpkg/issues/143#issuecomment-346973704 for source
      - name: 'Edit vcpkg triplets'
        run: Add-Content -Path C:\vcpkg\triplets\*.cmake -Value 'set(VCPKG_BUILD_TYPE release)'
        shell: pwsh

      # Install starlink-ast and cfitsio libraries onto the runner
      - name: 'Install vcpkg libraries'
        run: C:\vcpkg\vcpkg.exe install starlink-ast:x64-windows cfitsio:x64-windows
        shell: pwsh

      # Fetch the idia-unity-vr repository
      - name: 'Checkout'
        uses: actions/checkout@v3

      # Install unity using another user's published github action.
      - name: 'Setup Unity'
        id: setup-unity
        uses: kuler90/setup-unity@v1.1.0
        with:
          unity-version: 2021.3.17f1
      
      # Activate Unity using the repository key
      - name: 'Activate Unity'
        id: activate-unity
        run: ${{steps.setup-unity.outputs.unity-path}} -batchmode -username ${{secrets.UNITY_USERNAME}} -password ${{secrets.UNITY_PASSWORD}} -serial ${{secrets.UNITY_SERIAL_KEY}} -quit
        shell: pwsh

      # Build the project using the build script
      - name: 'Run the project build script'
        run: .\build.ps1 -vcpkg "C:\vcpkg\scripts\buildsystems\vcpkg.cmake" -u "${{steps.setup-unity.outputs.unity-path}}" -d "build"
        shell: pwsh

      # Make the "artifact" from the built pipeline
      # NB! Test output, and/or fix Steam XR issues.
      - name: 'Compress the built project'
        run: |
          if (-not ((Get-ChildItem -Force -Path ./build/ | Measure-Object).Count -lt 1))
          {
            Get-ChildItem -Force -Path ./build/ | foreach {Compress-Archive -Path $_.FullName -Update -DestinationPath "${{ github.workspace }}\iDaVIE-${{ github.sha }}_${{ github.event_name }}.zip"}
          }
          else
          {
            Get-ChildItem -Force -Recurse -Path ../
          }
        shell: pwsh

      # Upload the compressed artifact to Github
      - name: 'Upload the built project'
        uses: actions/upload-artifact@v3
        with:
          name: "iDaVIE_${{ github.ref_name }}_${{ github.workflow }}_${{ github.event_name }}"
          path: "${{ github.workspace }}/*.zip"
          if-no-files-found: error
          retention-days: 14
      
      # Release the licence
      - name: 'Release the Unity licence'
        id: release-unity
        run: ${{steps.setup-unity.outputs.unity-path}} -quit -batchmode -returnlicense -username ${{secrets.UNITY_USERNAME}} -password ${{secrets.UNITY_PASSWORD}}
          
      # Upload the log files to Github
      - name: 'Upload the log files'
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: "iDaVIE_${{ github.sha }}_${{ github.workflow }}_${{ github.event_name }}_Log_Files"
          path: "${{ github.workspace }}/*.log"
          if-no-files-found: error
          retention-days: 7