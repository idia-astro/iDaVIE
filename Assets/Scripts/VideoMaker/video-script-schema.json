{
    "$schema": "https://json-schema.org/draft/2019-09/schema",
    "$id": "url-here",
    "title": "Video Script",
    "description": "Video Script JSON files for iDaVIE. This serves as a super-set of the bespoke Video Script language.",
    "type": "object",
    "$defs": {
        "continueAction": {
            "description": "Continue the previous position / look action component.",
            "const": "continue"
        },
        "relativeAction": {
            "description": "Use the position or direction from the start of the 'first', end of the 'previous' or start of the 'next' action relative to the current action.",
            "enum": ["first", "previous", "next"]
        },
        "namedDirection": {
            "description": "Named directions in engine space.",
            "enum": ["forward", "back", "left", "right", "up", "down"]
        },
        "pathDirection": {
            "description": "Direction defined relative to a path that the camera is moving along. If no path is defined, then default directions will be used. The directions (with defaults) are: \n \n - 'alongPath' (default: forward): Look in the tangent direction of the path.\n - 'upPath' (default: back): Look in the curvature direction of the path.",
            "enum": ["alongPath", "upPath"]
        },
        "direction": {
            "description": "Direction in engine space. The direction will be automatically normalised. Zero vectors will be replaced by the forward direction.",
            "type": "object",
            "properties": {
                "type": {
                    "const": "direction"
                },
                "x": {
                    "description": "x-component of the direction.",
                    "type": "number",
                    "default": 0
                },
                "y": {
                    "description": "y-component of the direction.",
                    "type": "number",
                    "default": 0
                },
                "z": {
                    "description": "z-component of the direction.",
                    "type": "number",
                    "default": 0
                }
            },
            "required": ["type"]
        },
        "rotation": {
            "description": "Euler rotations of the camera.",
            "type": "object",
            "properties": {
                "type": {"const": "rotation"},
                "x": {
                    "description": "Rotation in degrees around the x-axis.",
                    "type": "number",
                    "default": 0
                },
                "y": {
                    "description": "Rotation in degrees around the y-axis.",
                    "type": "number",
                    "default": 0
                },
                "z": {
                    "description": "Rotation in degrees around the z-axis.",
                    "type": "number",
                    "default": 0
                }
            },
            "required": ["type"]
        },
        "namedPosition": {
            "description": "Named positions.",
            "enum": ["center"]
        },
        "position": {
            "description": "Position in engine space.",
            "type": "object",
            "properties": {
                "type": {
                    "const": "position"
                },
                "x": {
                    "description": "x-component of the position.",
                    "type": "number",
                    "default": 0
                },
                "y": {
                    "description": "y-component of the position.",
                    "type": "number",
                    "default": 0
                },
                "z": {
                    "description": "z-component of the position.",
                    "type": "number",
                    "default": 0
                }
            },
            "required": ["type"]
        },
        "easing": {
            "description": "Easing function with both time and value normalised. In general the default easing function is linear (effectively no easing). \n \n If no 'kind' property is given, an asymmetrical ease-in-out with a linear middle can be defined. In this case, only two of the 'durationIn', 'durationMid' and 'durationOut' properties should be defined, and the sum of the values should not exceed 1.",
            "type": "object",
            "properties": {
                "type": {
                    "const": "easing"
                },
                "kind": {
                    "description": "Specify a kind of easing function.",
                    "enum": ["linear", "in", "out", "inOut"]
                },
                "order": {
                    "description": "The exponential order of the easing function. This applies to the 'in', 'out', 'inOut' and no 'kind' easing functions.",
                    "type": "integer",
                    "default": 2,
                    "minimum": 2,
                    "maximum": 10
                },
                "durationIn" : {
                    "description": "The duration over which to ease-in (in normalised time). Applies to the no 'kind' easing function only.",
                    "type": "number",
                    "default": 0.5,
                    "minimum": 0,
                    "maximum": 1
                },
                "durationMid": {
                    "description": "The duration (in normalised time) between easing-in and out where the function is linear. Applies to the no 'kind' easing function only.",
                    "type": "number",
                    "default": 0,
                    "minimum": 0,
                    "maximum": 1
                },
                "durationOut": {
                    "description": "The duration over which to ease-out (in normalised time). Applies to the no 'kind' easing function only.",
                    "type": "number",
                    "default": 0.5,
                    "minimum": 0,
                    "maximum": 1
                }
            },
            "required": ["type"]
        },
        "directionBetween": {
            "description": "Change direction from 'start' to 'end' over the duration of the action.",
            "type": "object",
            "properties": {
                "type": {"const": "lookBetween"},
                "start": {
                    "description": "Starting direction.",
                    "default": "previous",
                    "oneOf": [
                        {"$ref": "#/$defs/relativeAction"},
                        {"$ref": "#/$defs/namedDirection"},
                        {"$ref": "#/$defs/direction"},
                        {"$ref": "#/$defs/relativeAction"},
                        {"$ref": "#/$defs/position"},
                        {"$ref": "#/$defs/path"}
                    ]
                },
                "end": {
                    "description": "Ending direction.",
                    "default": "next",
                    "oneOf": [
                        {"$ref": "#/$defs/relativeAction"},
                        {"$ref": "#/$defs/namedDirection"},
                        {"$ref": "#/$defs/direction"},
                        {"$ref": "#/$defs/relativeAction"},
                        {"$ref": "#/$defs/position"},
                        {"$ref": "#/$defs/path"}
                    ]
                },
                "easing": {"$ref": "#/$defs/easing"}
            },
            "required": ["type"]
        },
        "rotateBetween": {
            "description": "Change rotation from 'start' to 'end' over the duration of the action.",
            "type": "object",
            "properties": {
                "type": {"const": "rotateBetween"},
                "start": {
                    "description": "Starting rotation.",
                    "default": "previous",
                    "oneOf": [
                        {"$ref": "#/$defs/relativeAction"},
                        {"$ref": "#/$defs/rotation"}
                    ]
                },
                "end": {
                    "description": "Ending rotation.",
                    "default": "next",
                    "oneOf": [
                        {"$ref": "#/$defs/relativeAction"},
                        {"$ref": "#/$defs/rotation"}
                    ]
                },
                "easing": {"$ref": "#/$defs/easing"}
            },
            "required": ["type"]
        },
        "path": {
            "description": "A path in 3D space. All paths can be defined using a start and end position, but these properties are sometimes optional. If no `kind` is defined, then a line-path is used.",
            "type": "object",
            "properties": {
                "type": {
                    "const": "path"
                },
                "easing": {"$ref": "#/$defs/easing"},
                "start": {
                    "description": "Start position of the path",
                    "default": "previous",
                    "oneOf": [
                        {"$ref": "#/$defs/relativeAction"},
                        {"$ref": "#/$defs/namedPosition"},
                        {"$ref": "#/$defs/position"}
                    ]
                },
                "end": {
                    "description": "End / destination position of the path",
                    "default": "next",
                    "oneOf": [
                        {"$ref": "#/$defs/relativeAction"},
                        {"$ref": "#/$defs/namedPosition"},
                        {"$ref": "#/$defs/position"}
                    ]
                }
            },
            "required": ["type"],
            "oneOf": [
                {
                    "title": "Line Path",
                    "description": "Line path, this is also used if no `kind` is specified.",
                    "properties": {
                        "kind": {"const": "line"}
                    }
                },
                {
                    "title": "Circle Path",
                    "description": "Circular path with positive angular direction chosen using a right-hand rule curl about the circle axis. There are a few sets of properties required to define the path (WIP).",
                    "properties": {
                        "kind": {"const": "circle"},
                        "center": {
                            "description": "Center position of the circle",
                            "default": "center",
                            "oneOf": [
                                {"$ref": "#/$defs/relativeAction"},
                                {"$ref": "#/$defs/namedPosition"},
                                {"$ref": "#/$defs/position"}
                            ]
                        },
                        "axis": {
                            "description": "Axis direction of the circle. If a rotation is used then the up direction of the rotation is the axis.",
                            "oneOf": [
                                {"$ref": "#/$defs/namedDirection"},
                                {"$ref": "#/$defs/direction"},
                                {"$ref": "#/$defs/rotation"}
                            ]
                        }
                    },
                    "required": ["kind"],
                    "oneOf": [
                        {
                            "description": "The distance between the `center` and `start` positions is used as the radius of the circle. The axis of the circle is the normal of the plane containing all of the defined positions, with direction chosen so that the positive angular direction is in the smallest arc from `start` to `end`. If the distance between the `end` and `center` is not the same as the radius, a new `center` is chosen to ensure the radius is constant (this new position will preserve the axis of the circle and will be the closest of the 2 possible positions).",
                            "properties": {
                                "rotations": {
                                    "description": "The number of (additional rotations) for the circle path to make. A value of magnitude 1 is the arc from `start` to `end`, larger magnitude define additional rotations. A negative value indicates the direction of the larger arc between `start` and `end`.",
                                    "type": "integer",
                                    "default": 1
                                }
                            },
                            "required": ["start", "end", "center"]
                        },
                        {
                            "description": "The start / end position is determined by other properties provided.",
                            "properties": {
                                "rotations" : {
                                    "description": "The number of rotations covered by the circle path. Partial rotations can be used.",
                                    "type": "number",
                                    "default": 1
                                }
                            },
                            "required": ["start", "center", "axis"]
                            }
                    ]
                },
                {
                    "title": "Spiral Path",
                    "description": "Spiral path, much like the circle path but with an evenly increasing / decreasing radius",
                    "properties": {
                        "kind": {"const": "spiral"},
                        "center": {
                            "description": "Center position of the spiral",
                            "default": "center",
                            "oneOf": [
                                {"$ref": "#/$defs/relativeAction"},
                                {"$ref": "#/$defs/namedPosition"},
                                {"$ref": "#/$defs/position"}
                            ]
                        },
                        "axis": {
                            "description": "Axis direction of the spiral. If a rotation is used then the up direction of the rotation is the axis.",
                            "oneOf": [
                                {"$ref": "#/$defs/namedDirection"},
                                {"$ref": "#/$defs/direction"},
                                {"$ref": "#/$defs/rotation"}
                            ]
                        },
                        "startRadius": {
                            "description": "Radius at the start position",
                            "type": "number",
                            "minimum": 0
                        },
                        "endRadius": {
                            "description": "Radius at the end position",
                            "type": "number",
                            "minimum": 0
                        }
                    },
                    "required": ["kind"],
                    "oneOf": [
                        {
                            "description": "The distance between the `center` and `start` positions is used as the starting radius of the circle, and the distance between 'center' and 'end' is used for the 'end' radius. The axis of the circle is the normal of the plane containing all of the defined positions, with direction chosen so that the positive angular direction is in the smallest arc from `start` to `end`.",
                            "properties": {
                                "rotations": {
                                    "description": "The number of (additional rotations) for the spiral path to make. A value of magnitude 1 is the arc from `start` to `end`, larger magnitudes define additional rotations. A negative value indicates the direction of the larger arc between `start` and `end`.",
                                    "type": "integer",
                                    "default": 1
                                }
                            },
                            "required": ["start", "end", "center"]
                        },
                        {
                            "description": "End position determined by other properties provided. If no 'endRadius' provided then radius will not change from 'startRadius'",
                            "properties": {
                                "rotations" : {
                                    "description": "The number of rotations covered by the spiral path. Partial rotations can be used.",
                                    "type": "number",
                                    "default": 1
                                }
                            },
                            "required": ["start", "center", "axis"]
                        }
                    ]
                }
            ]
        },
        "action": {
            "title": "Action",
            "description": "Standard action used to combine camera movements and orientations. Note that the use of properties 'lookAt' and 'lookAway' are mutually exclusive, 'lookUp' and 'lookDown' are mutually exclusive, and 'rotation' is mutually exclusive all the 'look...' properties. Note that the 'kind' property is optional for this type.",
            "type": "object",
            "properties": {
                "duration": {
                    "description": "The duration of the action is seconds.",
                    "type": "number",
                    "default": 0,
                    "minimum": 0
                },
                "position": {
                    "description": "The position of the camera. If a static position is used, then this position will be held for the duration of the action. If a path is used then the camera will move over the path over the duration of the action.",
                    "default": "continue",
                    "oneOf": [
                        {"$ref": "#/$defs/relativeAction"},
                        {"$ref": "#/$defs/continueAction"},
                        {"$ref": "#/$defs/namedPosition"},
                        {"$ref": "#/$defs/position"},
                        {"$ref": "#/$defs/path"}
                    ]
                },
                "lookAt": {
                    "description": "The direction for the camera to look in, or the target for it to look at.\n \n If a rotation is provided, then the forward direction of the rotation is used.",
                    "default": "continue",
                    "oneOf": [
                        {"$ref": "#/$defs/relativeAction"},
                        {"$ref": "#/$defs/continueAction"},
                        {"$ref": "#/$defs/namedDirection"},
                        {"$ref": "#/$defs/pathDirection"},
                        {"$ref": "#/$defs/direction"},
                        {"$ref": "#/$defs/directionBetween"},
                        {"$ref": "#/$defs/easing"},
                        {"$ref": "#/$defs/rotation"},
                        {"$ref": "#/$defs/namedPosition"},
                        {"$ref": "#/$defs/position"},
                        {"$ref": "#/$defs/path"}
                    ]
                },
                "lookAway" : {
                    "description": "The opposite direction for the camera to look in, or the target for it to look away from.\n \n If a rotation is provided, then the forward direction of the rotation is used.",
                    "oneOf": [
                        {"$ref": "#/$defs/relativeAction"},
                        {"$ref": "#/$defs/continueAction"},
                        {"$ref": "#/$defs/namedDirection"},
                        {"$ref": "#/$defs/pathDirection"},
                        {"$ref": "#/$defs/direction"},
                        {"$ref": "#/$defs/directionBetween"},
                        {"$ref": "#/$defs/easing"},
                        {"$ref": "#/$defs/rotation"},
                        {"$ref": "#/$defs/namedPosition"},
                        {"$ref": "#/$defs/position"},
                        {"$ref": "#/$defs/path"}
                    ]
                },
                "lookUp": {
                    "description": "The direction / direction towards target that defines the up direction of the camera. This direction does not have to be orthogonal with the forward direction of the camera.\n \n If a rotation is provided, then the up direction of the rotation is used.",
                    "default": "continue",
                    "oneOf" : [
                        {"$ref": "#/$defs/relativeAction"},
                        {"$ref": "#/$defs/continueAction"},
                        {"$ref": "#/$defs/namedDirection"},
                        {"$ref": "#/$defs/pathDirection"},
                        {"$ref": "#/$defs/direction"},
                        {"$ref": "#/$defs/directionBetween"},
                        {"$ref": "#/$defs/easing"},
                        {"$ref": "#/$defs/rotation"},
                        {"$ref": "#/$defs/namedPosition"},
                        {"$ref": "#/$defs/position"},
                        {"$ref": "#/$defs/path"}
                    ]
                },
                "lookDown": {
                    "description": "The opposite direction to the up direction.\n \n If a rotation is provided, then the up direction of the rotation is used.",
                    "oneOf" : [
                        {"$ref": "#/$defs/relativeAction"},
                        {"$ref": "#/$defs/continueAction"},
                        {"$ref": "#/$defs/namedDirection"},
                        {"$ref": "#/$defs/pathDirection"},
                        {"$ref": "#/$defs/direction"},
                        {"$ref": "#/$defs/directionBetween"},
                        {"$ref": "#/$defs/easing"},
                        {"$ref": "#/$defs/rotation"},
                        {"$ref": "#/$defs/namedPosition"},
                        {"$ref": "#/$defs/position"},
                        {"$ref": "#/$defs/path"}
                    ]
                },
                "rotation": {
                    "description": "The euler rotation of the camera in engine space.",
                    "oneOf": [
                        {"$ref": "#/$defs/relativeAction"},
                        {"$ref": "#/$defs/continueAction"},
                        {"$ref": "#/$defs/rotation"},
                        {"$ref": "#/$defs/rotateBetween"},
                        {"$ref": "#/$defs/easing"}
                    ]
                }
            }
        }
    },
    "properties": {
        "width": {
            "description": "The width of the video image in pixels.",
            "type": "integer",
            "default": 1280,
            "minimum": 1
        },
        "height": {
            "description": "The height of the video image in pixels.",
            "type": "integer",
            "default": 720,
            "minimum": 1
        },
        "frameRate": {
            "description": "The frame rate of the video in frame-per-second.",
            "type": "integer",
            "default": 20,
            "minimum": 1
        },
        "logoSize": {
            "description": "The size of the logo as a fraction of the height the image.",
            "type": "number",
            "default": 0.2,
            "minimum": 0.2
        },
        "logoPosition": {
            "default": "bottomRight",
            "enum": ["bottomRight", "bottomCenter", "bottomLeft", "centerRight", "center", "centerCenter", "centerLeft", "topRight", "topCenter", "topLeft"]
        },
        "actions": {
            "description": "",
            "type": "array",
            "items": {"$ref": "#/$defs/action"}
        }
    }
}