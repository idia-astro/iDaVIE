#pragma kernel MomentsGenerator
#pragma kernel MaskedMomentsGenerator

RWTexture2D<float> Moment0Result;
RWTexture2D<float> Moment1Result;
Texture3D<float> DataCube;
Texture3D<int> MaskCube;

float Threshold;
int Depth;

[numthreads(8,8,1)]
void MomentsGenerator (uint3 id : SV_DispatchThreadID)
{    
    float sum = 0.0f;
    float sumWeighted = 0.0f;

    uint3 index = id.xyz;

    for (int i = 0; i < Depth; i++)
    {
        index.z = i;
        float val = DataCube[index];
        if (val >= Threshold)
        {
            sum += val;
            sumWeighted += val * i;
        }
    }
    Moment0Result[id.xy] = sum;
    Moment1Result[id.xy] = (sum != 0.0f? sumWeighted / sum: 0.0f);    
}

[numthreads(8,8,1)]
void MaskedMomentsGenerator (uint3 id : SV_DispatchThreadID)
{    
    float sum = 0.0f;
    float sumWeighted = 0.0f;
    uint3 index = id.xyz;

    for (int i = 0; i < Depth; i++)
    {
        index.z = i;
        int maskVal = MaskCube[index];
        if (maskVal)
        {
            float val = DataCube[index];
            sum += val;
            sumWeighted += val * i;            
        }
    }
    Moment0Result[id.xy] = sum;
    Moment1Result[id.xy] = (sum != 0.0f? sumWeighted / sum: 0.0f);
}

#pragma kernel LinearColormap

sampler2D ColormapTexture;
RWTexture2D<float> InputTexture;
RWTexture2D<float4> OutputTexture;

float ClampMin;
float ClampMax;
float ColormapOffset;

[numthreads(8,8,1)]
void LinearColormap (uint3 id : SV_DispatchThreadID)
{
    float inputVal = InputTexture[id.xy];
    float range = ClampMax - ClampMin;
    float val = (inputVal - ClampMin) / range;

    float4 color = tex2Dlod(ColormapTexture, float4(val, 1.0 - ColormapOffset, 0, 0));
    OutputTexture[id.xy] = color;       
} 