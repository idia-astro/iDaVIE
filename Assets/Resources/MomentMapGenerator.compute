#pragma kernel MomentsGenerator
#pragma kernel MaskedMomentsGenerator

#define LINEAR 0
#define LOG 1
#define SQRT 2
#define SQUARE 3
#define POWER 4
#define GAMMA 5

RWTexture2D<float> Moment0Result;
RWTexture2D<float> Moment1Result;
Texture3D<float> DataCube;
Texture3D<int> MaskCube;

RWStructuredBuffer<float> Spectrum;

float Threshold;
int Depth;
float Mom1MaskThreshold;

[numthreads(8,8,1)]
void MomentsGenerator (uint3 id : SV_DispatchThreadID)
{    
    float sum = 0.0f;
    float sumWeighted = 0.0f;

    uint3 index = id.xyz;

    for (int i = 0; i < Depth; i++)
    {
        index.z = i;
        float val = DataCube[index];
        if (val >= Threshold)
        {
            sum += val;
            sumWeighted += val * Spectrum[i];
        }
    }
    Moment0Result[id.xy] = sum;
    Moment1Result[id.xy] = sumWeighted / sum;    
}

[numthreads(8,8,1)]
void MaskedMomentsGenerator (uint3 id : SV_DispatchThreadID)
{    
    float mom0Sum = 0.0f;
    float mom1Sum = 0.0f;
    float mom1SumWeighted = 0.0f;
    
    uint3 index = id.xyz;

    for (int i = 0; i < Depth; i++)
    {
        index.z = i;
        int maskVal = MaskCube[index];
        if (maskVal)
        {
            float val = DataCube[index];
            mom0Sum += val;
            if (val < Mom1MaskThreshold)
                continue;
            mom1Sum += val;
            mom1SumWeighted += val * Spectrum[i];            
        }
    }
    Moment0Result[id.xy] = mom0Sum;
    Moment1Result[id.xy] = mom1SumWeighted / mom1Sum;
}

#pragma kernel LinearColormap

sampler2D ColormapTexture;
RWTexture2D<float> InputTexture;
RWTexture2D<float4> OutputTexture;

float ClampMin;
float ClampMax;
float ColormapOffset;

int ScaleType;
float ScaleAlpha;
float ScaleGamma;
float ScaleBias;
float ScaleContrast;

[numthreads(8,8,1)]
void LinearColormap (uint3 id : SV_DispatchThreadID)
{
    float inputVal = InputTexture[id.xy];

    if (isnan(inputVal))
    {
        OutputTexture[id.xy] = 0;
        return;
    }
    
    float range = ClampMax - ClampMin;
    float x = (inputVal - ClampMin) / range;
    // // Non-linear scaling
    if (ScaleType == SQUARE)
    {
        x = x * x;
    }
    else if (ScaleType == SQRT)
    {
        x = sqrt(x);
    }
    else if (ScaleType == LOG)
    {
        x = clamp(log(ScaleAlpha * x + 1.0) / log(ScaleAlpha), 0.0, 1.0);
    }
    else if (ScaleType == POWER)
    {
        x = (pow(ScaleAlpha, x) - 1.0) / ScaleAlpha;
    }
    else if (ScaleType == GAMMA)
    {
        x = pow(x, ScaleGamma);
    }
    
    // bias mod
    x = clamp(x - ScaleBias, 0.0, 1.0);
    // contrast mod
    x = clamp((x - 0.5) * ScaleContrast + 0.5, 0.0, 1.0);

    float4 color = tex2Dlod(ColormapTexture, float4(x, 1.0 - ColormapOffset, 0, 0));
    OutputTexture[id.xy] = color;       
} 